package mst.trapdoorexploitfixer;

import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockRedstoneEvent;
import org.bukkit.metadata.FixedMetadataValue;
import org.bukkit.metadata.MetadataValue;
import org.bukkit.plugin.java.JavaPlugin;

import java.util.List;

public class BukkitListener implements Listener {
    private static final String metaDateKey = "redstone-zeroing-counter-date";
    private static final String metaCountKey = "redstone-active-count";
    private static final int macChangeCount = 100;
    private static final long timeStep = 1000L;
    private final JavaPlugin plugin;

    public BukkitListener(JavaPlugin plugin) {
        this.plugin = plugin;
    }

    @EventHandler
    private void interactTrapdoor(BlockRedstoneEvent event) {
        final Block block = event.getBlock();
        if (event.getNewCurrent() <= 0 || !isPotentialPest(block.getType()))
            return;

        final int count = getRedstoneChangeCount(block);

        if (count >= macChangeCount) {
            final boolean isTimeNotUp = isTimeIsNotUp(block);
            if (isTimeNotUp) {
                event.setNewCurrent(0);
                block.setType(Material.AIR);
            }
            setFirstChangeCount(block);
            return;
        }

        if (count == 0)
            updateTime(block);

        setRedstoneChangeCount(block, count + 1);
    }

    private void setFirstChangeCount(Block block) {
        setRedstoneChangeCount(block, 1);
        updateTime(block);
    }

    private boolean isTimeIsNotUp(Block block) {
        final List<MetadataValue> metaList = block.getMetadata(metaDateKey);
        if (metaList.isEmpty())
            return false;

        final MetadataValue value = metaList.get(0);
        return System.currentTimeMillis() - value.asLong() < timeStep;
    }

    private int getRedstoneChangeCount(Block block) {
        final List<MetadataValue> metaList = block.getMetadata(metaCountKey);
        if (metaList.isEmpty())
            return 0;
        return metaList.get(0).asInt();
    }

    private void setRedstoneChangeCount(Block block, int count) {
        block.setMetadata(metaCountKey, new FixedMetadataValue(plugin, count));
    }

    private void updateTime(Block block) {
        block.setMetadata(metaDateKey, new FixedMetadataValue(plugin, System.currentTimeMillis()));
    }

    private boolean isPotentialPest(Material material) {
        return switch (material) {
            case OAK_TRAPDOOR,
                DARK_OAK_TRAPDOOR,
                IRON_TRAPDOOR,
                BIRCH_TRAPDOOR,
                JUNGLE_TRAPDOOR,
                SPRUCE_TRAPDOOR,
                WARPED_TRAPDOOR,
                CRIMSON_TRAPDOOR,
                ACACIA_TRAPDOOR,
                ACTIVATOR_RAIL,
                POWERED_RAIL,
                DARK_OAK_DOOR,
                ACACIA_DOOR,
                BIRCH_DOOR,
                CRIMSON_DOOR,
                IRON_DOOR,
                JUNGLE_DOOR,
                OAK_DOOR,
                SPRUCE_DOOR,
                WARPED_DOOR,
                COMPARATOR,
                REPEATER,
                ACACIA_FENCE_GATE,
                BIRCH_FENCE_GATE,
                CRIMSON_FENCE_GATE,
                DARK_OAK_FENCE_GATE,
                JUNGLE_FENCE_GATE,
                OAK_FENCE_GATE,
                SPRUCE_FENCE_GATE,
                WARPED_FENCE_GATE->
                true;
            default -> false;
        };
    }
}
